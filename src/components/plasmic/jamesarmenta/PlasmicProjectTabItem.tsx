// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uqLoCtoBYZiDt8D79DKGpo
// Component: JKE3W8Wul_

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TabContent from "../../TabContent"; // plasmic-import: 763WFw6XbL/component
import ProjectItem from "../../ProjectItem"; // plasmic-import: UYI2WcGsSU/component
import TabTrigger from "../../TabTrigger"; // plasmic-import: LdyxwopXo0/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_jamesarmenta.module.css"; // plasmic-import: uqLoCtoBYZiDt8D79DKGpo/projectcss
import sty from "./PlasmicProjectTabItem.module.css"; // plasmic-import: JKE3W8Wul_/css

export type PlasmicProjectTabItem__VariantMembers = {};
export type PlasmicProjectTabItem__VariantsArgs = {};
type VariantPropType = keyof PlasmicProjectTabItem__VariantsArgs;
export const PlasmicProjectTabItem__VariantProps = new Array<VariantPropType>();

export type PlasmicProjectTabItem__ArgsType = {
  tabname?: string;
  tabdestination?: string;
  img?: React.ReactNode;
  text?: React.ReactNode;
};
type ArgPropType = keyof PlasmicProjectTabItem__ArgsType;
export const PlasmicProjectTabItem__ArgProps = new Array<ArgPropType>(
  "tabname",
  "tabdestination",
  "img",
  "text"
);

export type PlasmicProjectTabItem__OverridesType = {
  root?: p.Flex<typeof TabContent>;
  projectItem?: p.Flex<typeof ProjectItem>;
  tabTrigger?: p.Flex<typeof TabTrigger>;
};

export interface DefaultProjectTabItemProps {
  tabname?: string;
  tabdestination?: string;
  img?: React.ReactNode;
  text?: React.ReactNode;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProjectTabItem__RenderFunc(props: {
  variants: PlasmicProjectTabItem__VariantsArgs;
  args: PlasmicProjectTabItem__ArgsType;
  overrides: PlasmicProjectTabItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          tabname: "tab1" as const,
          tabdestination: "tab2" as const
        },
        props.args
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <TabContent
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames("__wab_instance", sty.root)}
      tabname={args.tabname}
    >
      <ProjectItem
        data-plasmic-name={"projectItem"}
        data-plasmic-override={overrides.projectItem}
        className={classNames("__wab_instance", sty.projectItem)}
        img={
          <TabTrigger
            data-plasmic-name={"tabTrigger"}
            data-plasmic-override={overrides.tabTrigger}
            className={classNames("__wab_instance", sty.tabTrigger)}
            destination={args.tabdestination}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__dAuFl)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"eager" as const}
                  src={{
                    src: "/plasmic/jamesarmenta/images/postalService.jpg",
                    fullWidth: 654,
                    fullHeight: 1000,
                    aspectRatio: undefined
                  }}
                />
              ),

              value: args.img
            })}
          </TabTrigger>
        }
        text={p.renderPlasmicSlot({
          defaultContents: "one!!",
          value: args.text
        })}
      />
    </TabContent>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "projectItem", "tabTrigger"],
  projectItem: ["projectItem", "tabTrigger"],
  tabTrigger: ["tabTrigger"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof TabContent;
  projectItem: typeof ProjectItem;
  tabTrigger: typeof TabTrigger;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProjectTabItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProjectTabItem__VariantsArgs;
    args?: PlasmicProjectTabItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProjectTabItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicProjectTabItem__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicProjectTabItem__ArgProps,
          internalVariantPropNames: PlasmicProjectTabItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProjectTabItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProjectTabItem";
  } else {
    func.displayName = `PlasmicProjectTabItem.${nodeName}`;
  }
  return func;
}

export const PlasmicProjectTabItem = Object.assign(
  // Top-level PlasmicProjectTabItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    projectItem: makeNodeComponent("projectItem"),
    tabTrigger: makeNodeComponent("tabTrigger"),

    // Metadata about props expected for PlasmicProjectTabItem
    internalVariantProps: PlasmicProjectTabItem__VariantProps,
    internalArgProps: PlasmicProjectTabItem__ArgProps
  }
);

export default PlasmicProjectTabItem;
/* prettier-ignore-end */
