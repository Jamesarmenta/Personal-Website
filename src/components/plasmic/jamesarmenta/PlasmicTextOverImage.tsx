// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uqLoCtoBYZiDt8D79DKGpo
// Component: XdB3XxYGIG

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_jamesarmenta.module.css"; // plasmic-import: uqLoCtoBYZiDt8D79DKGpo/projectcss
import sty from "./PlasmicTextOverImage.module.css"; // plasmic-import: XdB3XxYGIG/css

export type PlasmicTextOverImage__VariantMembers = {};
export type PlasmicTextOverImage__VariantsArgs = {};
type VariantPropType = keyof PlasmicTextOverImage__VariantsArgs;
export const PlasmicTextOverImage__VariantProps = new Array<VariantPropType>();

export type PlasmicTextOverImage__ArgsType = {
  slot?: React.ReactNode;
  destination?: string;
  widthPx?: number;
  img?: React.ReactNode;
};
type ArgPropType = keyof PlasmicTextOverImage__ArgsType;
export const PlasmicTextOverImage__ArgProps = new Array<ArgPropType>(
  "slot",
  "destination",
  "widthPx",
  "img"
);

export type PlasmicTextOverImage__OverridesType = {
  content?: p.Flex<"a"> & Partial<LinkProps>;
  overlay?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
};

export interface DefaultTextOverImageProps {
  slot?: React.ReactNode;
  destination?: string;
  widthPx?: number;
  img?: React.ReactNode;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTextOverImage__RenderFunc(props: {
  variants: PlasmicTextOverImage__VariantsArgs;
  args: PlasmicTextOverImage__ArgsType;
  overrides: PlasmicTextOverImage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          widthPx: 444 as const
        },
        props.args
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const [isContentHover, triggerContentHoverProps] = useTrigger("useHover", {});
  const [isContentFocus, triggerContentFocusProps] = useTrigger(
    "useFocused",
    {}
  );
  const triggers = {
    hover_content: isContentHover,
    focus_content: isContentFocus
  };

  return (
    true ? (
      <p.PlasmicLink
        data-plasmic-name={"content"}
        data-plasmic-override={overrides.content}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.a,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.content
        )}
        component={Link}
        href={args.destination}
        platform={"nextjs"}
        data-plasmic-trigger-props={[
          triggerContentHoverProps,
          triggerContentFocusProps
        ]}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__x62E)}
              displayHeight={"auto" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"none" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"100%" as const}
              loading={"lazy" as const}
              src={{
                src: "/plasmic/jamesarmenta/images/postalService.jpg",
                fullWidth: 654,
                fullHeight: 1000,
                aspectRatio: undefined
              }}
              style={(() => {
                try {
                  return { width: $props.widthPx + "px" };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return { width: "400px" };
                  }
                  throw e;
                }
              })()}
            />
          ),

          value: args.img
        })}
        {(
          triggers.focus_content ? true : triggers.hover_content ? true : true
        ) ? (
          <div
            data-plasmic-name={"overlay"}
            data-plasmic-override={overrides.overlay}
            className={classNames(projectcss.all, sty.overlay)}
            style={(() => {
              try {
                return { width: $props.widthPx + "px" };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return { width: "400px" };
                }
                throw e;
              }
            })()}
          >
            {true ? (
              <div
                data-plasmic-name={"freeBox"}
                data-plasmic-override={overrides.freeBox}
                className={classNames(projectcss.all, sty.freeBox)}
              >
                {p.renderPlasmicSlot({
                  defaultContents: "Enter some text",
                  value: args.slot
                })}
              </div>
            ) : null}
          </div>
        ) : null}
      </p.PlasmicLink>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  content: ["content", "overlay", "freeBox"],
  overlay: ["overlay", "freeBox"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  content: "a";
  overlay: "div";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTextOverImage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTextOverImage__VariantsArgs;
    args?: PlasmicTextOverImage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTextOverImage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicTextOverImage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicTextOverImage__ArgProps,
          internalVariantPropNames: PlasmicTextOverImage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTextOverImage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "content") {
    func.displayName = "PlasmicTextOverImage";
  } else {
    func.displayName = `PlasmicTextOverImage.${nodeName}`;
  }
  return func;
}

export const PlasmicTextOverImage = Object.assign(
  // Top-level PlasmicTextOverImage renders the root element
  makeNodeComponent("content"),
  {
    // Helper components rendering sub-elements
    overlay: makeNodeComponent("overlay"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicTextOverImage
    internalVariantProps: PlasmicTextOverImage__VariantProps,
    internalArgProps: PlasmicTextOverImage__ArgProps
  }
);

export default PlasmicTextOverImage;
/* prettier-ignore-end */
