// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uqLoCtoBYZiDt8D79DKGpo
// Component: UYI2WcGsSU

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantsvgP4ScKnJiYlJ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: VgP4SCKnJiYlJ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_jamesarmenta.module.css"; // plasmic-import: uqLoCtoBYZiDt8D79DKGpo/projectcss
import sty from "./PlasmicProjectItem.module.css"; // plasmic-import: UYI2WcGsSU/css

export type PlasmicProjectItem__VariantMembers = {
  reverse: "reverse";
};
export type PlasmicProjectItem__VariantsArgs = {
  reverse?: SingleBooleanChoiceArg<"reverse">;
};
type VariantPropType = keyof PlasmicProjectItem__VariantsArgs;
export const PlasmicProjectItem__VariantProps = new Array<VariantPropType>(
  "reverse"
);

export type PlasmicProjectItem__ArgsType = {
  img?: React.ReactNode;
  text?: React.ReactNode;
};
type ArgPropType = keyof PlasmicProjectItem__ArgsType;
export const PlasmicProjectItem__ArgProps = new Array<ArgPropType>(
  "img",
  "text"
);

export type PlasmicProjectItem__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultProjectItemProps {
  img?: React.ReactNode;
  text?: React.ReactNode;
  reverse?: SingleBooleanChoiceArg<"reverse">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProjectItem__RenderFunc(props: {
  variants: PlasmicProjectItem__VariantsArgs;
  args: PlasmicProjectItem__ArgsType;
  overrides: PlasmicProjectItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "reverse",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.reverse
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsvgP4ScKnJiYlJ()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rootreverse]: hasVariant($state, "reverse", "reverse") }
      )}
    >
      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox__rbLjo)}>
          {p.renderPlasmicSlot({
            defaultContents: (
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img___8P192, {
                  [sty.imgreverse___8P192PHWaZ]: hasVariant(
                    $state,
                    "reverse",
                    "reverse"
                  )
                })}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"none" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/jamesarmenta/images/postalService.jpg",
                  fullWidth: 654,
                  fullHeight: 1000,
                  aspectRatio: undefined
                }}
              />
            ),

            value: args.img
          })}
        </div>
      ) : null}
      {true ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__a9Vjl)}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Enter some text",
            value: args.text,
            className: classNames(sty.slotTargetText, {
              [sty.slotTargetTextreverse]: hasVariant(
                $state,
                "reverse",
                "reverse"
              )
            })
          })}
        </p.Stack>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProjectItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProjectItem__VariantsArgs;
    args?: PlasmicProjectItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProjectItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicProjectItem__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicProjectItem__ArgProps,
          internalVariantPropNames: PlasmicProjectItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProjectItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProjectItem";
  } else {
    func.displayName = `PlasmicProjectItem.${nodeName}`;
  }
  return func;
}

export const PlasmicProjectItem = Object.assign(
  // Top-level PlasmicProjectItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicProjectItem
    internalVariantProps: PlasmicProjectItem__VariantProps,
    internalArgProps: PlasmicProjectItem__ArgProps
  }
);

export default PlasmicProjectItem;
/* prettier-ignore-end */
